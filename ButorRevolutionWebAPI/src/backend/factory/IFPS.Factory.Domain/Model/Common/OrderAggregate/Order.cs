using ENCO.DDD;
using ENCO.DDD.Domain.Model.Entities.Auditing;
using IFPS.Factory.Domain.Events;
using IFPS.Factory.Domain.Exceptions;
using System;
using System.Collections.Generic;
using System.Linq;

namespace IFPS.Factory.Domain.Model
{
    public class Order : FullAuditedAggregateRoot<Guid>
    {
        /// <summary>
        /// Name of the order, wich helps the salesperson to identify it. 
        /// By default, it is the AddressValue field of the installment place
        /// </summary>
        public string OrderName { get; set; }

        /// <summary>
        /// Autogenerated working number of the order
        /// It has fix format: Number/Year
        /// Number is autoincremented by the backend
        /// </summary>
        public string WorkingNumber { get; set; }

        public Company Company { get; set; }
        public int CompanyId { get; set; }

        /// <summary>
        /// This is the date, when the customer wants the furniture to be installed
        /// </summary>
        public DateTime Deadline { get; set; }

        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Date, when the customer signed the contract
        /// </summary>
        public DateTime ContractDate { get; set; }

        public OrderPrice FirstPayment { get; set; }
        public int? FirstPaymentId { get; set; }

        public OrderPrice SecondPayment { get; set; }
        public int? SecondPaymentId { get; set; }

        public virtual Optimization Optimization { get; set; }
        public Guid? OptimizationId { get; set; }

        /// <summary>
        /// Current ticket of the order
        /// </summary>
        public Ticket CurrentTicket { get; set; }
        public int CurrentTicketId { get; set; }

        /// <summary>
        /// Estimated time for process
        /// </summary>
        public int EstimatedProcessTime { get; set; }

        /// <summary>
        /// The state of process (percentage)
        /// </summary>
        public double Completion { get; set; }

        /// <summary>
        /// All tickets of the order
        /// </summary>
        private List<Ticket> _tickets;
        public IEnumerable<Ticket> Tickets => _tickets.AsReadOnly();

        /// <summary>
        /// Private list of documents
        /// </summary>
        private List<Document> _documents;
        public IEnumerable<Document> Documents => _documents.AsReadOnly();

        /// <summary>
        /// Private list of furniture units
        /// </summary>
        private List<FurnitureUnit> _furnitureUnits;
        public IEnumerable<FurnitureUnit> FurnitureUnits => _furnitureUnits.AsReadOnly();

        /// <summary>
        /// Private list of furniture units
        /// </summary>
        private List<ConcreteFurnitureUnit> _concreteFurnitureUnits;
        public IEnumerable<ConcreteFurnitureUnit> ConcreteFurnitureUnits => _concreteFurnitureUnits.AsReadOnly();


        /// <summary>
        /// Private list of appliance materials
        /// </summary>
        private List<ConcreteApplianceMaterial> _concreteApplianceMaterials;
        public IEnumerable<ConcreteApplianceMaterial> ConcreteApplianceMaterials => _concreteApplianceMaterials.AsReadOnly();

        public string IniContent { get; set; }

        public string JsonContent { get; set; }

        private Order()
        {
            Id = Guid.NewGuid();
            _tickets = new List<Ticket>();
            _furnitureUnits = new List<FurnitureUnit>();
            _concreteFurnitureUnits = new List<ConcreteFurnitureUnit>();
            _documents = new List<Document>();
            _concreteApplianceMaterials = new List<ConcreteApplianceMaterial>();
        }

        public Order(string orderName) : this()
        {
            OrderName = orderName;
        }

        public Order(string orderName, DateTime deadline) : this()
        {
            OrderName = orderName;
            Deadline = deadline;
        }

        public void AddTicket(Ticket ticket)
        {
            Ensure.NotNull(ticket);

            if (_tickets.Any(ent => ent.ValidTo == null))
            {
                throw new IFPSDomainException("Wrong tickets are archieved");
            }

            if (CurrentTicket != null)
            {
                CurrentTicket.Close(this);
                _tickets.Add(CurrentTicket);
                CurrentTicket = null;
            }

            CurrentTicket = ticket;
        }

        public void AddCFU(ConcreteFurnitureUnit cfu)
        {
            Ensure.NotNull(cfu);
            _concreteFurnitureUnits.Add(cfu);
        }

        public void AddConcreteApplianceMaterial(ConcreteApplianceMaterial concreteApplianceMaterial)
        {
            _concreteApplianceMaterials.Add(concreteApplianceMaterial);
        }

        public void SetProductionCompleteState(int userId)
        {
            AddDomainEvent(new WaitingForSecondPaymentDomainEvent(this, userId));
        }

        public void SetWaitingForSchedulingState(int userId)
        {
            AddDomainEvent(new WaitingForSchedulingDomainEvent(this, userId));
        }

        public void SetUnderMaterialReservationState(int userId)
        {
            AddDomainEvent(new UnderMaterialReservationDomainEvent(this, userId));
        }

        public void SetUnderProductionState(int userId)
        {
            AddDomainEvent(new UnderProductionDomainEvent(this, userId));
        }

        public void SetFirstPaymentConfirmed(int userId)
        {
            AddDomainEvent(new FirstPaymentConfirmedDomainEvent(this, userId));
        }

        public void SetSecondPaymentConfirmed(int userId)
        {
            AddDomainEvent(new SecondPaymentConfirmedDomainEvent(this, userId));
        }

        public void SetScheduledState(int userId)
        {
            AddDomainEvent(new ScheduledDomainEvent(this, userId));
        }
    }
}
